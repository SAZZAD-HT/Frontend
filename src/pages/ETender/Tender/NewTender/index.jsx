import React,{
    useEffect,
    useReducer,
    useState
} from 'react';
import {
    Row,
    Col,
    Button,
    Form
} from 'antd';
import { 
    useLocation,
    useNavigate
} from 'react-router';
import {
    useSelector,
    useDispatch
} from 'react-redux';
import { 
    resetTender,
    updateChildren,
    updateValueWithOnChange,
    updateChildrenWithItemSelect,
    addNewItems,
    updateTotalAmount,
    updatePrevItemLists,
    updateTotalQuantity,
    updateTender,
    updateTenderAll,
    removeTenderItem,
    setChildrenLists
} from '../../../../Redux/features/tender/tenderSlice';
import ConfigureAxios from '../../../../utils/axios';
import { 
    useCreateUpdateTenderMutation,
    useGetTenderGradeListsQuery 
} from '../../../../Redux/features/tender/tenderApi';
import ComponentHeader from '../../../../components/ui/ComponentHeader';
import ContentContainer from '../../../../components/ui/ContentContainer';
import NewTenderMain from '../../../../components/ETender/Tender/NewTender';
import SaveButton from '../../../../components/ui/Button/Save';
import ResetButton from '../../../../components/ui/Button/Reset';
import { 
    Success,
    Warning,
    Error 
} from '../../../../utils/Message';
import _ from 'lodash';
import { 
    initialState,
    newTenderReducer 
} from './local_state';
import axios from 'axios';

const NewTenderPage=()=>{
    const location = useLocation();
    const history=useNavigate();
    const IsUpdate=location.state?.IsUpdate?location.state.IsUpdate:false
    const TenderNo=location.state?.TenderNo?location.state.TenderNo:'';
    const IsNotPublished=location.state?.IsNotPublished?location.state.IsNotPublished:'';
    const IsGoing=location.state?.IsGoing?location.state.IsGoing:'';
    const {tender}=useSelector((state)=>state);
    const [form] = Form.useForm();
    const dispatch=useDispatch();
    const [state,localDispatch]=useReducer(newTenderReducer,initialState);
    const [isFiles,setIsFiles]=useState(false);
    const [submitDisabled,setSubmitDisabled]=useState(false);
    const [itemLists,setItemLists]=useState([]);
    const [optionLists,setOptionLists]=useState([]);
    const [skipFetch,setSkipFetch]=useState(true)
    const [defaultAttach,setDefaultAttach]=useState([]);
    const {}=useGetTenderGradeListsQuery(undefined,{skip:skipFetch});
    const [createUpdateTender]=useCreateUpdateTenderMutation();
    const [totalAmount,setTotalAmount]=useState(tender.tenderTotalAmount);
    const [totalQuantity,setTotalQuantity]=useState(tender.tenderTotalQuantity);
    const [children,setChildren]=useState([])
    
    const {
        classLists
    }=useSelector((state)=>state.ui);




    useEffect(()=>{
        if(TenderNo){
            ConfigureAxios();
            getTenderDetails(TenderNo);
        }
        //console.log("Update",IsUpdate)
        if(!IsUpdate){
            ConfigureAxios();
           
           // alert("Calleddd")
            autoGeneratedTenderNo();
        }
        getAllTenderItems();
        setSkipFetch(false);
        return ()=> {
            if(IsUpdate){
                dispatch(resetTender())
            }
        };
    },[IsUpdate]);

    useEffect(()=>{
        //console.log(tender.tenderAttach)
        let attach=JSON.stringify(tender.tenderAttach);
        attach=JSON.parse(attach);
        setDefaultAttach(attach)
        //console.log(attach)
        form.setFieldsValue({
            "TenderTitle":tender.tenderTitle,
            "TenderTotal":tender.tenderTotalAmount,
            "MinimumBidAmount":tender.tenderMinimumBid,
            "TenderDescription":tender.tenderDescription,
            //"TenderAttachment":attach
        })
    },[])

    useEffect(()=>{
        form.setFieldsValue({
            //"TenderNo":tender.tenderNo,
            "TenderTitle":tender.tenderTitle,
            "TenderDescription":tender.tenderDescription,
            "TenderTotal":tender.tenderTotalAmount,
            "MinimumBidAmount":tender.tenderMinimumBid,
        })
    },[tender.tenderNo,tender.tenderTitle,tender.tenderDescription,tender.tenderTotalAmount,tender.tenderMinimumBid])


    const getTenderDetails=async(TenderNo)=>{
        if(TenderNo){
            axios.get(`/getTenderDetails?TenderNo=${TenderNo}`)
            .then((response)=>{
                if(response.status===200){
                    if(response?.data?.data?.lists?.TenderId){
                        const {
                            TenderId,
                            TenderNo,
                            TenderTitle,
                            TenderDescription,
                            TotalAmount,
                            details,
                            TenderAttachment
                        }=response.data.data.lists;

                        let totalQty=0;
                        let configChildren=[];
                        if(details.length){
                            totalQty=details.reduce((accum,current)=>{return accum+current.ItemQuantity},0);
                            details.map((dta)=>{
                                const newObj={
                                    ItemId:dta.ItemId,
                                    ItemName:dta?.ItemName,
                                    ItemNameError:false,
                                    ItemRemarks:dta?.ItemRemarks,
                                    ItemRemarksError:false,
                                    ItemGrade:dta?.Grades,
                                    ItemGradeError:false,
                                    UnitOfMeasurement:dta?.UnitOfMeasurement,
                                    UnitOfMeasurementError:false,
                                    BasePrice:dta?.lastRate,
                                    TargetPrice:dta?.ItemRate,
                                    TargetPriceError:false,
                                    BasePriceError:false,
                                    ItemQuantity:dta?.ItemQuantity,
                                    ItemQuantityError:false,
                                    ItemTotal:dta?.ItemValue,
                                    ItemTotalError:false,
                                    LastBidDate:dta?.LastBidDate
                                }
                                configChildren=[...configChildren,newObj];
                            })

                            if(IsNotPublished){
                                let prevItemLists=[];

                                details.map((d)=>{
                                    const newObject={
                                        ItemId:d.ItemId
                                    }
                                    prevItemLists=[...prevItemLists,newObject];
                                })

                                if(prevItemLists.length){
                                    dispatch(updatePrevItemLists(prevItemLists))
                                }
                            }
                        }


                        const TenderInfo={
                            TenderId:TenderId,
                            TenderNo:TenderNo,
                            TenderTitle:TenderTitle,
                            TenderDescription:TenderDescription,
                            TenderTotalQuantity:totalQty?totalQty:0,
                            TenderTotalAmount:TotalAmount,
                            TenderMinimumBid:TotalAmount,
                            TenderAttachment:TenderAttachment,
                        }
                        form.setFieldsValue({
                            "TenderNo":TenderNo
                        })

                        //alert('FFFF')
                        dispatch(updateTenderAll({topInfo:TenderInfo,children:configChildren}))
                    }
                    //console.log("Tender Data : ",response.data.data.lists)
                }
            }).catch((error)=>{
                console.log("get tender details with tender no error.");
            })
        }
    }
    const autoGeneratedTenderNo=()=>{
        let TenderId="";
        ConfigureAxios();
        const myDate=new Date();
        let dateFormat=myDate.getFullYear()+'-'+(myDate.getMonth()+1)+"-"+myDate.getDate();
        const monthh=myDate.getMonth()+1;
        const todayDate=myDate.getDate()<10?'0'+myDate.getDate():myDate.getDate()
        //console.log(dateFormat)
        axios.get(`/getlastEntryTenderId?filterDate=${dateFormat}`)
        .then((response)=>{
            if(response.data && response.status==200){
                const {data}=response.data;
                //console.log(data)
                if(data==5000){
                    TenderId=`${myDate.getFullYear()}${monthh<10?'0'+monthh:monthh}${todayDate}001`;
                            form.setFieldsValue({
                                "TenderNo":TenderId
                            })
                }else{
                    if(data>=0){
                        if(data<10){
                            TenderId=`${myDate.getFullYear()}${monthh<10?'0'+monthh:monthh}${todayDate}00${data+1}`;
                            form.setFieldsValue({
                                "TenderNo":TenderId
                            })
                        }else if(data<100){
                            TenderId=`${myDate.getFullYear()}${monthh<10?'0'+monthh:monthh}${todayDate}0${data+1}`;
                            form.setFieldsValue({
                                "TenderNo":TenderId
                            })
                        }else{
                            TenderId=`${myDate.getFullYear()}${monthh<10?'0'+monthh:monthh}${todayDate}${data+1}`;
                            form.setFieldsValue({
                                "TenderNo":TenderId
                            })
                        }
                    }
                }
            }
        }).catch((error)=>{
            console.log("get last tender id error!")
        })
    }
    const getAllTenderItems=()=>{
        ConfigureAxios();
        //console.log(dateFormat)
        axios.get(`/getAllTenderItems`)
        .then((response)=>{
            if(response.data && response.status==200){
                const {lists}=response.data.data;
                //console.log("Lists",lists)

                if(lists.length){
                    //setItemLists(lists)
                    const newLists=configItemLists(lists)
                    const newLists2=configItemLists2(lists);

                    if(newLists.length){
                        setOptionLists(newLists)
                    }
                    if(newLists2.length){
                        setItemLists(newLists2)
                    }
                    //console.log(newLists,newLists2)
                }else{
                    setItemLists([])
                }
               
            }
        }).catch((error)=>{
            setItemLists([])
            console.log("get last tender id error!")
        })
    }
    const onValueChanges=(currentValue,allValues)=>{
        if(currentValue.TenderAttachment?.file){
            const file=currentValue.TenderAttachment?.file;
          
            const reader = new FileReader();
            reader.onload = (e) => {
              const fileData = {
                name: file.name,
                size: file.size,
                type: file.type,
                preview: e.target.result, // Store the base64 encoded image for preview
              };
              dispatch(updateTender({name:"tenderAttach",values:fileData}))
            };
            reader.readAsDataURL(file);
            setIsFiles(true)
            
        }else if(currentValue.TenderNo){
            dispatch(updateTender({name:"tenderNo",values:currentValue.TenderNo}))
        }else if(currentValue.TenderTitle){
            dispatch(updateTender({name:"tenderTitle",values:currentValue.TenderTitle}))
        }else if(currentValue.TenderTotal){
            dispatch(updateTender({name:"tenderTotalAmount",values:currentValue.TenderTotal}))
        }else if(currentValue.MinimumBidAmount){
            dispatch(updateTender({name:"tenderMinimumBid",values:currentValue.MinimumBidAmount}))
        }else if(currentValue.TenderDescription){
            dispatch(updateTender({name:"tenderDescription",values:currentValue.TenderDescription}))
        }
    }
    
    const configItemLists=(lists)=>{
        const newLists=[...lists];
        let myLists=[];

        if(newLists?.length){
            lists.map((data)=>{
                if(myLists?.length){
                    const filter=myLists.filter((dta)=>{return dta.value==data.value})
                    if(!filter.length){
                        const newObj={
                            value:data.value
                        }
                        myLists=[...myLists,newObj];
                    }
                }else{
                    const newObj={
                        value:data.value
                    }
                    myLists=[...myLists,newObj];
                }
            })
        }

        return myLists;
    }
    const configItemLists2=(lists)=>{
        const newLists=[...lists];
        let myLists=[];

        if(newLists?.length){
            newLists.map((data)=>{
                if(myLists?.length){
                    const filter=myLists.filter((dta)=>{return dta.value==data.value})
                    //console.log("Filter : ",filter)
                    if(!filter.length){
                        const newObj={
                            ItemId:data.ItemId,
                            value:data.value
                        }
                        myLists=[...myLists,newObj];
                    }
                }else{
                    const newObj={
                        ItemId:data.ItemId,
                        value:data.value
                    }
                    myLists=[...myLists,newObj];
                }
            })
        }

        return myLists;
    }
    const onFormSubmit=async(values)=>{
        const UserId=localStorage.getItem("UserId");
        const tenderChildrenString=JSON.stringify(tender.children);
        const tenderChildren=JSON.parse(tenderChildrenString);
        let hasFile=false;

   
        const formData=new FormData();

        let fileType=values.TenderAttachment?.file?.name;
        if(fileType){
            fileType=fileType.split(".");
            const len=fileType.length;
            fileType=fileType[len-1];
            const TenderImageName=`${values.TenderNo}.${fileType}`;


            formData.append("file",values.TenderAttachment?.file,`${TenderImageName}`);
            hasFile=true;
            //console.log("DATA",formData)
        }
       
        let IsValidationError=false;
        
        if(tender.children.length && tenderChildren.length){
            tender.children.forEach((ele,index)=>{
                if(ele.ItemName==""){
                    tenderChildren[index].ItemNameError=true;
                }
                if(ele.ItemRemarks==""){
                    tenderChildren[index].ItemRemarksError=true;
                }
                // if(ele.ItemGrade.value=="" || !ele.ItemGrade.value){
                //     tenderChildren[index].ItemGradeError=true;
                // }
                if(ele.UnitOfMeasurement==""){
                    tenderChildren[index].UnitOfMeasurementError=true;
                }
                if(ele.TargetPrice==""){
                    tenderChildren[index].TargetPriceError=true;
                }
                if(ele.ItemQuantity=="" || !ele.ItemQuantity){
                    tenderChildren[index].ItemQuantityError=true;
                }
                if(ele.ItemTotal=="" || !ele.ItemTotal){
                    tenderChildren[index].ItemTotalError=true;
                }
                if(ele.ItemName=="" || ele.ItemRemarks=="" || ele.UnitOfMeasurement=="" || ele.TargetPrice=="" || ele.ItemQuantity==""){
                    IsValidationError=true
                } 
            })
        }
        if(IsValidationError){
            dispatch(setChildrenLists(tenderChildren))
        }else{
            setSubmitDisabled(true);
            ConfigureAxios();
            if(!IsUpdate){
               // console.log("Form Data: ",formData)
                axios.post(`/upload/image`,formData,{
                    headers:{
                        'Content-Type': 'multipart/form-data'
                    }
                }).then((response)=>{
                    if(response.status===200){
                        const myObject={
                            TenderNo:values.TenderNo,
                            TenderTitle:values.TenderTitle,
                            TenderDetails:values.TenderDescription,
                            TenderTotalAmount:parseFloat(values.TenderTotal),
                            MinimumBidAmount:parseFloat(values.MinimumBidAmount),
                            TenderAttachment:response?.data?.path,
                            CreatedBy:parseInt(UserId),
                            Details:[]
                        }
    
                        if(tender.children.length && tenderChildren.length){
                            tender.children.forEach((ele,index)=>{
                                //IsValidationError=false;
                                const newObject={
                                    ItemName:ele.ItemName,
                                    ItemRemarks:ele.ItemRemarks,
                                    UnitOfMeasurement:ele.UnitOfMeasurement,
                                    ItemGrade:ele.ItemGrade?.value,
                                    ItemPrice:ele.BasePrice,
                                    ItemTargetPrice:ele.TargetPrice,
                                    ItemQuantity:ele.ItemQuantity,
                                    ItemTotalAmount:parseFloat(ele.ItemTotal),
                                    CreatedBy:parseInt(UserId),
                                    LastBidDate:ele?.LastBidDate?ele.LastBidDate:""
                                }
                                myObject.Details=[...myObject.Details,newObject]
                                
                            })
                        }
                       // console.log("OBJECT",myObject)
                        createUpdateTender({data:JSON.stringify(myObject)})
                        .then((response)=>{
                            //console.log(response)
                            if(response.data?.status_code===201 && response?.data?.IsEntry==true){
                                autoGeneratedTenderNo();
                                getAllTenderItems();
                                Success("Saved Sucess.",{},{});
                                form.resetFields()
                                dispatch(resetTender())
                                // setTotalAmount(0);
                                // setTotalQuantity(0);
                                setSubmitDisabled(false)
                            }
                        }).catch((errr)=>{
                            setSubmitDisabled(false)
                            console.log(errr)
                        })
                    }
                }).catch((error)=>{
                    setSubmitDisabled(false)
                    console.log("Image Insert Error!")
                })
            }else{
                setSubmitDisabled(false);
                let AttachmentName="";
                if(hasFile){
                    //alert("Hellooo")
                    AttachmentName=await axios.post(`/upload/image`,formData,{
                        headers:{
                            'Content-Type': 'multipart/form-data'
                        }
                    }).then((response)=>{
                        if(response.status===200){
                            return response?.data?.path;
                        }
                    }).catch((error)=>{
                        setSubmitDisabled(false);
                        return "";
                    })
                    //console.log(AttachmentName)

                    if(AttachmentName){

                    }else{

                    }
                }else{
                    AttachmentName=tender.tenderAttachment;
                }

                if(AttachmentName){
                    if(IsUpdate && IsGoing && !IsNotPublished){
                     
                        const myObject={
                            TenderNo:values.TenderNo,
                            TenderTitle:values.TenderTitle,
                            TenderDetails:values.TenderDescription,
                            TenderTotalAmount:parseFloat(values.TenderTotal),
                            MinimumBidAmount:parseFloat(values.MinimumBidAmount),
                            TenderAttachment:AttachmentName,
                            UpdatedBy:parseInt(UserId),
                            Details:[]
                        }
    
                        //console.log("Children : ",tender.children)
                        if(tender.children.length && tenderChildren.length){
                            tender.children.forEach((ele,index)=>{
                                //IsValidationError=false;
                                const newObject={
                                    ItemId:ele.ItemId,
                                    TargetRate:ele.TargetPrice,
                                    ItemValue:ele.ItemTotal,
                                    UpdatedBy:parseInt(UserId)
                                }
                                myObject.Details=[...myObject.Details,newObject]
                                
                            })
                        }

                        //console.log("Object: ",myObject)

                        axios.post(`/updateOnGoingTender`,JSON.stringify(myObject))
                        .then((response)=>{
                            if(response.status===200 && response.data.status_code==201){
                                Success("Successfully Updated.",{},{});
                                setSubmitDisabled(false);
                                form.resetFields()
                                dispatch(resetTender());
                                history("/tender/tender/newTender",{state:{IsUpdate:false,TenderNo:false,IsGoing:false,IsNotPublished:false}});
                            }
                        }).catch((error)=>{
                            setSubmitDisabled(false)
                            Error("Update tender failed.")
                            console.log(error)
                        })
                    }else if(IsUpdate && IsNotPublished && !IsGoing){
                        //alert("Calledd")
                        const myObject={
                            //TenderId:tender.tenderId,
                            TenderNo:values.TenderNo,
                            TenderTitle:values.TenderTitle,
                            TenderDetails:values.TenderDescription,
                            TenderTotalAmount:parseFloat(values.TenderTotal),
                            MinimumBidAmount:parseFloat(values.MinimumBidAmount),
                            TenderAttachment:AttachmentName,
                            UpdatedBy:parseInt(UserId),
                            PreviousItems:[],
                            CurrentItems:[]
                        }
    
                        if(tender.prevItemLists?.length){
                            const tenderChildrenString=JSON.stringify(tender.prevItemLists);
                            const tenderChildren=JSON.parse(tenderChildrenString);
                            myObject.PreviousItems=[...tenderChildren]
                        }
                        //console.log("Children : ",tender.children)
                        if(tender.children.length && tenderChildren.length){
                            tender.children.forEach((ele,index)=>{
                                //IsValidationError=false;
                                const newObject={
                                    ItemId:ele.ItemId?ele.ItemId:"100001",
                                    TenderId:tender.tenderId,
                                    ItemName:ele.ItemName,
                                    ItemRemarks:ele.ItemRemarks,
                                    ItemGrade:ele.ItemGrade?.value?ele.ItemGrade.value:0,
                                    UnitOfMeasurement:ele.UnitOfMeasurement,
                                    ItemPrice:ele.BasePrice,
                                    ItemTargetPrice:ele.TargetPrice,
                                    ItemQuantity:ele.ItemQuantity,
                                    ItemTotalAmount:ele.ItemTotal,
                                    CreatedBy:parseInt(UserId),
                                    LastBidDate:ele.LastBidDate
                                }
                                myObject.CurrentItems=[...myObject.CurrentItems,newObject]
                                
                            })
                        }

                        //console.log("Object : ",myObject)
                        axios.post(`/updateNotPublishedTender`,JSON.stringify(myObject))
                        .then((response)=>{
                            if(response.status==200){
                                Success("Successfully Updated.",{},{});
                                setSubmitDisabled(false);
                                form.resetFields()
                                dispatch(resetTender());
                                history("/tender/tender/newTender",{state:{IsUpdate:false,TenderNo:false,IsGoing:false,IsNotPublished:false}});
                            }
                            //console.log(response)
                        }).catch((error)=>{
                            setSubmitDisabled(false)
                            Error("Update tender failed.")
                            console.log(error)
                        })
                        //console.log("Children : ",myObject)

                    }
                }else{

                }
            }
        }
       

    }

    const handleAddNewTenderItem=()=>{
        dispatch(addNewItems())
    }

    const handleRemoveTenderItem=(index)=>{
       dispatch(removeTenderItem({index:index}))
    }

    const onChildrenInputChange=(values,type,name,index)=>{
        if(type=="text"){
            const {value}=values.target;
            dispatch(updateValueWithOnChange({values:value,type,name,index}))
        }
        else if(type=="textarea"){
            const {value}=values;
            dispatch(updateValueWithOnChange({values:value,type,name,index}))
        }else{
            dispatch(updateValueWithOnChange({values,type,name,index}))
        }
    }

    const handleOnSelectItems=(value,option,index)=>{
        // console.log("Value :",value);
        // console.log("Options : ",option)
        // console.log("Index",index)
        const object={
            ItemName:option?.value,
            ItemId:option?.ItemId
        }
        ConfigureAxios();
        axios.post(`/getItemsPriceDate`,JSON.stringify(object))
        .then((response)=>{
            //console.log(response)
            if(response.status==200){
                const {lists}=response.data.data;

                if(lists?.length){
                    
                    // const newLists=_.cloneDeep(state.children);
                    // newLists[index].BasePrice=lists[0].BidPrice;
                    // newLists[index].LastBidDate=lists[0].CreatedAt;

                    // //dispatch(updateChildren(newLists));
                    // //setChildren(newLists)
                    // localDispatch({
                    //     type:"ADD_NEW_CHILDREN",
                    //     data:newLists
                    // })
                    dispatch(updateChildrenWithItemSelect({lists,index}))
                }
                //console.log(lists)
            }
        }).catch((error)=>{

        })
    }
    // const {children}=tender;
    //console.log("Loc",location)
    return(
        <>
            <ComponentHeader
            title={"Create Tender"}
            description={"You can create a new tender here."}
            >
                <ResetButton
                onSubmit={()=>{
                    dispatch(resetTender())
                    form.resetFields()
                    autoGeneratedTenderNo();
                    setIsFiles(false);
                  
                    setSubmitDisabled(false)

                    if(IsUpdate){
                        history("/tender/tender/newTender",{state:{IsUpdate:false,TenderNo:false,IsGoing:false,IsNotPublished:false}});
                    }
                }}
                >
                    Reset
                </ResetButton>
                <SaveButton
                onSubmit={()=>{
                    form.submit()
                }}
                disabled={submitDisabled}
                >
                    {IsUpdate?"Update":"Save"}
                </SaveButton>
            </ComponentHeader>
            <ContentContainer>
                <NewTenderMain
                props={{
                    children:tender.children,
                    setChildren,
                    handleRemoveTenderItem,
                    handleAddNewTenderItem,
                    form,
                    defaultAttach:defaultAttach,
                    onValueChanges,
                    onFormSubmit,
                    onChildrenInputChange,
                    isFiles,
                    totalAmount:tender.tenderTotalAmount,
                    totalQuantity:tender.tenderTotalQuantity,
                    submitDisabled,
                    itemLists:itemLists,
                    handleOnSelectItems,
                    IsUpdate,
                    IsNotPublished,
                    IsGoing
                }}
                />
            </ContentContainer>
        </>
    )
};
export default NewTenderPage;